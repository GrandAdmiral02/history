// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum định nghĩa các vai trò người dùng
enum UserRole {
  USER
  GUIDE
  ADMIN
}

// Enum định nghĩa trạng thái đặt tour
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Enum định nghĩa trạng thái thanh toán
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Enum định nghĩa phương thức thanh toán
enum PaymentMethod {
  CREDIT_CARD
  E_WALLET
  BANK_TRANSFER
  CASH
}

// Model người dùng
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  phone         String?
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]

  @@map("users")
}

// Model tài khoản của NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Model phiên đăng nhập của NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Model xác thực của NextAuth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Model tour du lịch
model Tour {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  price       Float
  duration    String
  location    String
  image       String?
  maxPeople   Int       @default(10)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  bookings    Booking[]

  @@map("tours")
}

// Model đặt tour
model Booking {
  id            String        @id @default(cuid())
  userId        String
  tourId        String
  departureDate DateTime
  participants  Int
  totalPrice    Float
  notes         String?       @db.Text
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour          Tour          @relation(fields: [tourId], references: [id], onDelete: Cascade)
  payments      Payment[]

  @@map("bookings")
}

// Model thanh toán
model Payment {
  id                String        @id @default(cuid())
  bookingId         String
  amount            Float
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  transactionId     String?
  paymentDetails    Json?
  paymentError      String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  booking           Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}
